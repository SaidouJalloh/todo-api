En utilisant la technologie GitHub, vous pouvez utiliser un outil de gestion d'arret GitHub Action appelé "github-actions/workflow-dispatch". Cela permet à votre projet d'exécuter une configuration de workflow automatique lorsque l'action est exécutée.

Premièrement, installez la dernière version de Github actions pour votre langage de programmation (Python en notre cas). Dans notre cas:

1. Dans le dossier de travail du projet, apportez-vous une nouvelle branch appelée `master` et insérez-y vos modifications supplémentaires.

2. Ajoutez votre propre `.github/workflows/` fichier pour l'instant contenir votre workflow. Si vous le souhaitez, créez également un dossier avec le même nom dans ce répertoire. Exemple:

   ```yaml
   name: Build and deploy

   on:
     pull_request:
       branches:
         - master
   
   jobs:
     build:
       runs-on: ubuntu-latest
       steps:
         - uses: actions/checkout@v2
         - name: Set up Python environment
           uses: actions/setup-python@v2
           with:
             python-version: '3.8'
             cache: [ 'pip', 'pipx' ]
         - name: Install dependencies
           run: |
             pip install -r requirements.txt
             pipx install poetry
         - name: Build and deploy
           env:
             PYTHON_ENV: production
           run: poetry run python setup.py sdist bdist_wheel --formats=zip
   ```

3. Appliquez votre workflow à l'aide de la commande `workflow-dispatch`:

   ```yaml
   name: Build and deploy

   on:
     pull_request:
       branches:
         - master
   
   jobs:
     build:
       runs-on: ubuntu-latest
       steps:
         - uses: actions/checkout@v2
         - name: Set up Python environment
           uses: actions/setup-python@v2
           with:
             python-version: '3.8'
             cache: [ 'pip', 'pipx' ]
         - name: Install dependencies
           run: |
             pip install -r requirements.txt
             pipx install poetry
         - name: Build and deploy
           env:
             PYTHON_ENV: production
           run: poetry run python setup.py sdist bdist_wheel --formats=zip
   ```

4. Si vous souhaitez utiliser des images Docker pour votre workflow, créez une nouvelle image Docker, puis exécutez-la comme suit dans la fenêtre de terminal ou l'IDE de votre choix:

   ```bash
   docker build -t YOUR_IMAGE_NAME .
   docker run --rm -it \
     -v $(pwd):/project \
     -v $HOME/.cache:/root/.cache \
     -w /project \
     YOUR_IMAGE_NAME:latest poetry run python setup.py sdist bdist_wheel --formats=zip
   ```

Vous devez maintenant que votre workflow est en train d'exécuter automatiquement. Votre projet devrait maintenant être déployé avec des images Docker prêtes à l'emploi et tous les tests passés.
Pour une meilleure pratique de CI/CD, vous pouvez utiliser GitLab Pipelines pour le déploiement final.