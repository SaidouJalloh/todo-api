Créateur: `Github Actions`

Sous-répertoire: `.github/workflows/`

Dépendances:
1. `node`: L’installation de Node.js est obligatoire pour l’utilisation de cette configuration GitHub Action.
2. `npm`: Utilisez `npm install` pour installer les dépendances nécessaires (si nécessaire).

Exécution des tests automatiquement :
1. Installation du `jest` et `ava` packages.
   - Pour plus d’informations sur ces modules, consultez la page [Jest](https://github.com/facebook/jest) ou [Ava](https://github.com/avajs/ava).
2. Lecture du fichier `package.json` pour récupérer les `dependencies` et `devDependencies`.
   - Si nécessaire, ajouter un `devDependency` ou `optionalDependency` dans le fichier `package.json`.

Véflication de la qualité du code :
1. Utilisation de la [linter-eslint](https://github.com/ESLint/eslint-plugin-eslint-plugin) pour évaluer l’utilisation de la `eslint` et `prettier` packages.
   - Pour plus d’informations sur les outils de linter, consultez la page [ESLint](https://eslint.org/) ou [Prettier](https://prettier.io/).
2. Instrumentation du code avec la `istanbul` et `nyc` modules.
   - Pour plus d’informations sur ces outils, consultez la page [Istanbul](https://gotwarlost.github.io/istanbul/) ou [NYC](https://getnikola.com/nikola-docs/core/#nystatico).
3. Vérification de l’utilisation du `coverage` dans le fichier `report`.
   - Le fichier `report` doit contenir un fichier `.html`, `json` ou `jsonl` qui indique à Github Action de visualiser la couverture du code.

Configuration de la CI/CD :
1. Configuration du [GitHub Actions](https://docs.github.com/en/actions) avec des variables d’environnement pour l’utilisation du `Node.js`, `Yarn` et `Npm`.
   - Pour plus d’informations sur ces outils, consultez la page [GitHub Actions](https://docs.github.com/en/actions).
2. Configuration de la [Docker image](https://docs.docker.com/configure-image-pull-security/) utilisée pour l’installation et le déploiement du code.
   - Pour plus d’informations sur les images Docker, consultez la page [Docker Images](https://docs.docker.com/builds/).
3. Configuration de la [branch source](https://docs.github.com/en/actions/using-workflows/working-with-github-actions#selecting-the-branch-or-directory-to-run-the-action-on) pour l’exécution de la workflow.
   - Pour plus d’informations sur les branches source, consultez la page [Branches source](https://docs.github.com/en/actions/using-workflows/working-with-github-actions#selecting-the-branch-or-directory-to-run-the-action-on).
4. Utilisation des `Github Secrets` pour l’identification du `repository`, de la `branch`, et de la `token`.
   - Pour plus d’informations sur les secrets, consultez la page [Secrets](https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#securescenariosecrets) ou [Configuration des secrets dans votre workflow](https://github.com/marketplace/actions/configuring-secrets?ref=repository).